name: Windows Release

on:
  push:
    branches:
      - 'main'
      - 'hamzah'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'
      - 'hamzah'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.5.1
  ARTIFACT: qt-mpGui-build.zip

jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: (2) Get all tags for correct version determination
        run: |
          git fetch --all --tags -f

      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}
          modules: qtcharts qt3d
          setup-python: false

      - name: (4) Download JOM
        uses: suisei-cn/actions-download-file@v1
        with:
          url: http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}

      - name: (5) Unzip JOM
        working-directory: ${{ runner.temp }}
        run:  |
          7z x jom.zip -ojom

      - name: (6) Create build directory
        run: mkdir ${{ runner.temp }}/build

      - name: (7) Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: (8) Build
        working-directory: ${{ runner.temp }}/build
        run:  |
          qmake -r ${{ env.SOURCE_DIR }}/qtGuiApplication/cardTest.pro
          ${{ runner.temp }}/jom/jom -j2
          copy ${{ env.SOURCE_DIR }}/build parliament.db .
          mkdir images
          copy ${{ env.SOURCE_DIR }}/images/* images
          cd images 
          mkdir parties
          mkdir portraits
          copy ${{ env.SOURCE_DIR }}/images/parties/* parties
          copy ${{ env.SOURCE_DIR }}/images/portraits/* portraits
          cd ..

          cd release
          windeployqt --qmldir ${{ env.SOURCE_DIR }}/build/release sqlite_qt.exe --pdb --release --compiler-runtime
          copy C:\Windows\System32\concrt140.dll . 
          copy C:\Windows\System32\vccorlib140.dll .
          copy C:\Windows\System32\msvcp140.dll .
          copy C:\Windows\System32\vcruntime140.dll .

      - name: (9) Zip build
        working-directory: ${{ runner.temp }}
        run:  |
          7z a qt-mpGui-build.zip -r ${{ runner.temp }}/build/*

      - name: (10) Save build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}

  setup-opencppcoverage:
    runs-on: windows-2019
    steps:
      - name: Setup OpenCppCoverage and add to Path
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:PATH

  run-and-generate-report:
    runs-on: windows-2019
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
  
      - name: Run UnitTests
        working-directory: ${{ github.workspace }}/build-UnitTests/debug
        run: ./"UnitTests.exe"
  
      - name: Generate Report
        id: generate_test_report
        shell: cmd
        run: |
          dir
          dir x64
          OpenCppCoverage.exe --export_type cobertura:345_2023.xml -- ${{ github.workspace }}/build-UnitTests/debug/UnitTests.exe


  upload-report:
    runs-on: ubuntu-latest
    needs: run-and-generate-report
    steps:
      - name: Upload Report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./tests_report.xml
          flags: fix
