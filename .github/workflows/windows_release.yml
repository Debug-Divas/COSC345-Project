name: Windows Release

on:
  push:
    branches:
    - 'main'
    tags:
    - 'v*'
  pull_request:
    branches:
    - 'main'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   6.5.1
  ARTIFACT:     qt-mpGui-build.zip

jobs:
  build:
    runs-on:  windows-latest
    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: (2) Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f
          
      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version:      ${{ env.QT_VERSION }}
          host:         windows
          target:       desktop
          arch:         win64_msvc2019_64
          dir:          ${{ runner.temp }}
          modules:      qtcharts qt3d
          setup-python: false

      - name: (4) Download JOM
        uses: suisei-cn/actions-download-file@v1
        with:
          url:    http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: (5) Unzip JOM
        working-directory: ${{ runner.temp }}
        run:  |
              7z x jom.zip -ojom
              
      - name: (6) Create build directory
        run: |
             mkdir ${{ runner.temp }}\qtGuiApplication
             xcopy /E /I ${{env.SOURCE_DIR }} ${{ runner.temp}}\qtGuiApplication
             mkdir ${{ runner.temp }}\UnitTests
             xcopy /E /I ${{ env.SOURCE_DIR }}\UnitTests ${{ runner.temp }}\UnitTests

      - name: (7) Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Copy Qt Headers to UnitTests
        run: |
          set "QT_HEADERS_SOURCE=${{ runner.temp }}\qt\${{ env.QT_VERSION }}\msvc2019_64\include"
          set "UNIT_TESTS_DIR=${{ github.workspace }}\UnitTests"
      
          mkdir "%UNIT_TESTS_DIR%\include"
      
          copy /Y "%QT_HEADERS_SOURCE%\QtCore" "%UNIT_TESTS_DIR%\include\"
          copy /Y "%QT_HEADERS_SOURCE%\QtGui" "%UNIT_TESTS_DIR%\include\"
        working-directory: ${{ runner.temp }}
  

      - name: (8) Build
        working-directory: ${{ runner.temp }}
        run: |
          qmake -r ${{ env.SOURCE_DIR }}/qtGuiApplication/cardTest.pro
          ${{ runner.temp }}/jom/jom -f ${{ env.SOURCE_DIR }}/build Makefile.Debug
          mkdir images
          copy ${{ env.SOURCE_DIR }}/images/* images
          cd images
          mkdir parties
          mkdir portraits
          copy ${{ env.SOURCE_DIR }}/images/parties/* parties
          copy ${{ env.SOURCE_DIR }}/images/portraits/* portraits
          cd ..
          copy ${{ env.SOURCE_DIR }}/build parliament.db .
          cd debug
          windeployqt --qmldir ${{ env.SOURCE_DIR }}/build/debug sqlite_qt.exe --pdb --debug --compiler-runtime
          copy C:\Windows\System32\concrt140.dll .
          copy C:\Windows\System32\vccorlib140.dll .
          copy C:\Windows\System32\msvcp140.dll .
          copy C:\Windows\System32\vcruntime140.dll .

      - name: (9) Zip build
        working-directory: ${{ runner.temp }}
        run:  |
              7z a qt-mpGui-build.zip ${{ runner.temp }}\qtGuiApplication\* -r

      - name: Save build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}\${{ env.ARTIFACT }}

      - name: Setup OpenCppCoverage and add to Path
        id: setup_opencppcoverage
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Compile tests and generate code coverage
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          dir
          
          cl /Zi /I${{ runner.temp }}\qt\${{ env.QT_VERSION }}\msvc2019_64\include UnitTests/main.cpp -o unit_test.exe
          unit_test.exe
          
      - name: Generate Report
        id: generate_test_report
        working-directory: ${{ github.workspace }}
        run: |
             cd UnitTests
             "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" --export_type cobertura:qt_application.xml -- main.exe
             dir

      - name: Upload Report to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ github.workspace }}\UnitTests
          files: qt_application.xml
          fail_ci_if_error: true
          functionalities: fix
