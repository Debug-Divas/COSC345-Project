name: Windows Release

on:
  push:
    branches:
      - 'main'
      - 'hamzah'
    tags:
      - 'v*'
  pull_request:
    branches:
    - 'main'
    - 'hamzah'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   6.5.1
  ARTIFACT:     qt-mpGui-build.zip

jobs:
  build:
    runs-on:  windows-2019

    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: (2) Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f
      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version:      ${{ env.QT_VERSION }}
          host:         windows
          target:       desktop
          arch:         win64_msvc2019_64
          dir:          ${{ runner.temp }}
          modules:      qtcharts qt3d
          setup-python: false

      - name: (4) Download JOM
        uses: suisei-cn/actions-download-file@v1
        with:
          url:    http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: (5) Unzip JOM
        working-directory: ${{ runner.temp }}
        run:  |
              7z x jom.zip -ojom
              
      - name: (6) Create build directory
        run:  mkdir ${{ runner.temp }}\build

      - name: (7) Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Build
        working-directory: ${{ runner.temp }}/build
        run: |
          qmake -r ${{ env.SOURCE_DIR }}/qtGuiApplication/cardTest.pro
          ${{ runner.temp }}/jom/jom -j2
          mkdir images
          copy ${{ env.SOURCE_DIR }}/images/* images
          cd images
          mkdir parties
          mkdir portraits
          copy ${{ env.SOURCE_DIR }}/images/parties/* parties
          copy ${{ env.SOURCE_DIR }}/images/portraits/* portraits
          cd ..
          copy ${{ env.SOURCE_DIR }}/build parliament.db .
          cd release
          windeployqt --qmldir ${{ env.SOURCE_DIR }}/build/release sqlite_qt.exe --pdb --release --compiler-runtime
          copy C:\Windows\System32\concrt140.dll .
          copy C:\Windows\System32\vccorlib140.dll .
          copy C:\Windows\System32\msvcp140.dll .
          copy C:\Windows\System32\vcruntime140.dll .

      - name: Zip build
        run: 7z a ${{ env.ARTIFACT }} ${{ runner.temp }}/build/* -r

      - name: Save build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.ARTIFACT }}

      - name: Unit Tests Build
        working-directory: ${{ runner.temp }}/build
        run: |
          qmake -r ${{ env.SOURCE_DIR }}/UnitTests/UnitTests.pro
          ${{ runner.temp }}/jom/jom -j2
          copy ${{ env.SOURCE_DIR }}/build parliament.db .
          cd debug
          windeployqt --qmldir ${{ env.SOURCE_DIR }}/build-UnitTests/debug UnitTests.exe --pdb --release --compiler-runtime
          copy C:\Windows\System32\concrt140.dll .
          copy C:\Windows\System32\vccorlib140.dll .
          copy C:\Windows\System32\msvcp140.dll .
          copy C:\Windows\System32\vcruntime140.dll .

      - name:  Unit Tests Zip build
        working-directory: ${{ runner.temp }}
        run:  |
              7z a qt-tests-build.zip ${{ runner.temp }}\build\* -r

      - name: Save Unit Tests build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TESTS_ARTIFACT }}
          path: ${{ env.TESTS_ARTIFACT }}

  run_app:
    runs-on: windows-2019
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TESTS_ARTIFACT }}

      - name: Unzip artifact
        run: 7z x ${{ env.TESTS_ARTIFACT }} -o${{ runner.temp }}/build

      - name: Run Application
        working-directory: ${{ env.SOURCE_DIR }}/build-UnitTests/debug/
        run: .\UnitTests.exe

      - name: Setup OpenCppCoverage and add to Path
        id: setup_opencppcoverage
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Generate Report
        id: generate_test_report
        run: |
          cd ${{ runner.temp }}/build/release
          OpenCppCoverage.exe --export_type cobertura:qt_application.xml -- UnitTests.exe

      - name: Upload Report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./qt_application.xml
          fail_ci_if_error: true
          functionalities: fix
